{"ast":null,"code":"import { LOAD_PRODUCTS, SET_LISTVIEW, SET_GRIDVIEW, UPDATE_SORT, SORT_PRODUCTS, UPDATE_FILTERS, FILTER_PRODUCTS, CLEAR_FILTERS } from '../actions';\n\nconst filter_reducer = (state, action) => {\n  if (action.type === LOAD_PRODUCTS) {\n    let maxPrice = action.payload.map(p => p.price);\n    maxPrice = Math.max(...maxPrice);\n    return { ...state,\n      all_products: [...action.payload],\n      filtered_products: [...action.payload],\n      filters: { ...state.filters,\n        max_price: maxPrice,\n        price: maxPrice\n      }\n    };\n  }\n\n  if (action.type === SET_GRIDVIEW) {\n    return { ...state,\n      grid_view: true\n    };\n  }\n\n  if (action.type === SET_LISTVIEW) {\n    return { ...state,\n      grid_view: false\n    };\n  }\n\n  if (action.type === UPDATE_SORT) {\n    return { ...state,\n      sort: action.payload\n    };\n  }\n\n  if (action.type === SORT_PRODUCTS) {\n    const {\n      sort,\n      filtered_products\n    } = state;\n    let tempProducts = [...filtered_products];\n\n    if (sort === 'price-lowest') {\n      tempProducts = tempProducts.sort((a, b) => a.price - b.price);\n    }\n\n    if (sort === 'price-highest') {\n      tempProducts = tempProducts.sort((a, b) => b.price - a.price);\n    }\n\n    if (sort === 'name-a') {\n      tempProducts = tempProducts.sort((a, b) => {\n        return a.name.localeCompare(b.name);\n      });\n    }\n\n    if (sort === 'name-z') {\n      tempProducts = tempProducts.sort((a, b) => {\n        return b.name.localeCompare(a.name);\n      });\n    }\n\n    return { ...state,\n      filtered_products: tempProducts\n    };\n  }\n\n  if (action.type === UPDATE_FILTERS) {\n    const {\n      name,\n      value\n    } = action.payload;\n    return { ...state,\n      filters: { ...state.filters,\n        [name]: value\n      }\n    };\n  }\n\n  if (action.type === FILTER_PRODUCTS) {\n    return { ...state\n    };\n  }\n\n  throw new Error(`No Matching \"${action.type}\" - action type`);\n};\n\nexport default filter_reducer;","map":{"version":3,"sources":["C:/Users/Gabi/Desktop/niki-store/src/reducers/filter_reducer.js"],"names":["LOAD_PRODUCTS","SET_LISTVIEW","SET_GRIDVIEW","UPDATE_SORT","SORT_PRODUCTS","UPDATE_FILTERS","FILTER_PRODUCTS","CLEAR_FILTERS","filter_reducer","state","action","type","maxPrice","payload","map","p","price","Math","max","all_products","filtered_products","filters","max_price","grid_view","sort","tempProducts","a","b","name","localeCompare","value","Error"],"mappings":"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","sourcesContent":["import {\n  LOAD_PRODUCTS,\n  SET_LISTVIEW,\n  SET_GRIDVIEW,\n  UPDATE_SORT,\n  SORT_PRODUCTS,\n  UPDATE_FILTERS,\n  FILTER_PRODUCTS,\n  CLEAR_FILTERS,\n} from '../actions'\n\nconst filter_reducer = (state, action) => {\n  if(action.type === LOAD_PRODUCTS){\n    let maxPrice = action.payload.map((p)=> p.price);\n    maxPrice = Math.max( ...maxPrice)\n    return { ...state, all_products: [...action.payload],filtered_products:[...action.payload], filters:{...state.filters, max_price:maxPrice, price:maxPrice}}\n  }\n  if(action.type === SET_GRIDVIEW){\n    return { ...state, grid_view:true}\n  }\n  if(action.type === SET_LISTVIEW){\n    return { ...state, grid_view:false}\n  }\n  if(action.type=== UPDATE_SORT){\n    return { ...state, sort:action.payload}\n  }\n  if(action.type === SORT_PRODUCTS){\n    const {sort, filtered_products} = state;\n    let tempProducts = [ ...filtered_products];\n    if(sort === 'price-lowest'){\n        tempProducts = tempProducts.sort((a,b)=>a.price - b.price)\n    }\n    if(sort === 'price-highest'){\n      tempProducts = tempProducts.sort((a,b)=>b.price - a.price)\n    }\n    if(sort === 'name-a'){\n      tempProducts = tempProducts.sort((a,b)=>{\n        return a.name.localeCompare(b.name)\n      })\n    }\n    if(sort === 'name-z'){\n      tempProducts = tempProducts.sort((a,b)=>{\n        return b.name.localeCompare(a.name)\n      })\n    }\n    return{ ...state, filtered_products: tempProducts}\n  }\n  if(action.type === UPDATE_FILTERS){\n    const {name, value} = action.payload\n    return {...state, filters:{...state.filters, [name]:value}} \n  }\n  if(action.type === FILTER_PRODUCTS){\n    return{... state}\n  }\n  throw new Error(`No Matching \"${action.type}\" - action type`)\n}\n\n\n\nexport default filter_reducer\n"]},"metadata":{},"sourceType":"module"}